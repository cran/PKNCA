% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dplyr.R
\name{group_by.PKNCAresults}
\alias{group_by.PKNCAresults}
\alias{group_by.PKNCAconc}
\alias{group_by.PKNCAdose}
\alias{ungroup.PKNCAresults}
\alias{ungroup.PKNCAconc}
\alias{ungroup.PKNCAdose}
\title{dplyr grouping for PKNCA}
\usage{
\method{group_by}{PKNCAresults}(.data, ..., .add = FALSE, .drop = dplyr::group_by_drop_default(.data))

\method{group_by}{PKNCAconc}(.data, ..., .add = FALSE, .drop = dplyr::group_by_drop_default(.data))

\method{group_by}{PKNCAdose}(.data, ..., .add = FALSE, .drop = dplyr::group_by_drop_default(.data))

\method{ungroup}{PKNCAresults}(x, ...)

\method{ungroup}{PKNCAconc}(x, ...)

\method{ungroup}{PKNCAdose}(x, ...)
}
\arguments{
\item{.data}{A data frame, data frame extension (e.g. a tibble), or a
lazy data frame (e.g. from dbplyr or dtplyr). See \emph{Methods}, below, for
more details.}

\item{...}{In \code{group_by()}, variables or computations to group by.
Computations are always done on the ungrouped data frame.
To perform computations on the grouped data, you need to use
a separate \code{mutate()} step before the \code{group_by()}.
Computations are not allowed in \code{nest_by()}.
In \code{ungroup()}, variables to remove from the grouping.}

\item{.add}{When \code{FALSE}, the default, \code{group_by()} will
override existing groups. To add to the existing groups, use
\code{.add = TRUE}.

This argument was previously called \code{add}, but that prevented
creating a new grouping variable called \code{add}, and conflicts with
our naming conventions.}

\item{.drop}{Drop groups formed by factor levels that don't appear in the
data? The default is \code{TRUE} except when \code{.data} has been previously
grouped with \code{.drop = FALSE}. See \code{\link[dplyr:group_by_drop_default]{group_by_drop_default()}} for details.}

\item{x}{A \code{\link[dplyr:tbl]{tbl()}}}
}
\description{
dplyr grouping for PKNCA
}
\seealso{
Other dplyr verbs: 
\code{\link{filter.PKNCAresults}()},
\code{\link{inner_join.PKNCAresults}()},
\code{\link{mutate.PKNCAresults}()}
}
\concept{dplyr verbs}
